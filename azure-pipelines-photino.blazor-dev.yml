# Build Photino.Blazor project from dev branch in GitHub
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- dev

variables:
  versionprefix: 0.9.0

jobs:
  - job: 'BuildPackageAndPublish'

    pool:
      vmImage: windows-latest

    variables:
      buildConfiguration: 'Debug'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: 5.0.100
        installationPath: $(Agent.ToolsDirectory)/dotnet
 
    - task: CmdLine@2
      displayName: 'Add NuGet source'
      inputs:
        script: 'dotnet nuget add source https://pkgs.dev.azure.com/tryphotino/Photino.Native/_packaging/PhotinoPackages/nuget/v3/index.json -n DevOpsArtifacts'

    - task: NuGetAuthenticate@0
      displayName: 'NuGet Authenticate'
      
    #Build .JS project - create desktop.blazor.js file used in Photino.Bloazor project
    - task: CmdLine@2
      displayName: 'Build desktop.blazor.js'
      inputs:
        script: dotnet build Photino.Blazor.JS/Photino.Blazor.JS.csproj -c $(buildConfiguration)

    #Does the file exist?
    - task: CmdLine@2
      displayName: 'list webpack output'
      inputs:
        script: dir /s desktop.blazor.js

    #Build and Create NuGet package
    - task: CmdLine@2
      displayName: 'Build and Create NuGet package'
      inputs:
        script: 'dotnet pack Photino.Blazor/Photino.Blazor.csproj -c $(buildConfiguration) --include-symbols /p:Version=$(versionprefix)-dev-$(Build.BuildNumber) /p:PackageVersion=$(versionprefix)-dev-$(Build.BuildNumber)'

    #Publish NuGet package to Artifacts
    - task: NuGetCommand@2
      displayName: 'NuGet push'
      inputs:
        command: push
        feedsToUse: 'select'
        publishVstsFeed: 'Photino.Native/PhotinoPackages'
        packagesToPush: 'Photino.Blazor/bin/$(buildConfiguration)/*.nupkg'
        allowPackageConflicts: true

  # Uploads the NuGet package file to nuget.org
  # Important notes:
  # 1. For this to work, you need to create a 'service connection' with the same name
  #    as the 'publishFeedCredentials' value.
  # 2. For security, you *must* ensure that 'Make secrets available to builds of forks'
  #    is disabled in your PR validation settings (inside build -> Edit -> Triggers).
  #    Otherwise, PRs would be able to push new packages even without being merged.
  #- job: 'PublishToNuGet'
  #  dependsOn: 'CombinePackages'
  #  steps:
  #  - task: DownloadBuildArtifacts@0
  #    inputs:
  #      downloadPath: 'artifacts'
  #      artifactName: 'artifacts-combined'
  #  - task: NuGetCommand@2
  #    displayName: 'Publish to nuget.org'
  #    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  #    inputs:
  #      command: push
  #      packagesToPush: 'artifacts/artifacts-combined/*.nupkg'
  #      nuGetFeedType: external
  #      publishFeedCredentials: 'WebWindowNuGet'
